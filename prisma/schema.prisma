// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Company {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  name        String
  email       String  @unique
  phone       String  @unique
  address     String?
  city        String?
  zipCode     String?
  state       String?
  description String?
  profilePic String?

  users User[]
  // scheduledMeetings ScheduledMeeting[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  email       String   @unique
  phone       String?
  firstName   String?
  lastName    String?
  password    String?
  role        RoleType @default(client)
  address     String?
  city        String?
  zipCode     String?
  state       String?
  description String?
  summary     String?
  profession  String?  @default("")

  profileImageUrl String? @default("profile-uploads/662fe80bf1be4d55e8a02d9a/1714637040328/FXOvrm8lMhVoSX7DWGOKagaapcU7ri6mI3Bh5ccT.jpg")

  referenceNumber String @unique

  companyId String?  @db.ObjectId // Ensure this matches the native type of Provider.id
  company   Company? @relation(fields: [companyId], references: [id])

  doctorId String? @db.ObjectId // Reference to another User (as a doctor)
  doctor   User?   @relation("DoctorRelation", fields: [doctorId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  patients User[] @relation("DoctorRelation")

  subscription Subscription[]

  doctorMeetings ScheduledMeeting[] @relation("DoctorScheduledMeetingRelation")
  clientMeetings ScheduledMeeting[] @relation("ClientScheduledMeetingRelation")

  meetingChats               MeetingMessages[]
  meetingParticipants        MeetingParticipants[]
  meetingCurrentParticipants MeetingCurrentParticipants[]
  meetingLogs                MeetingLogs[]

  chats    ChatUser[]
  messages Message[]

  notifications UserNotification[]

  // gpsTrackingId String      @db.ObjectId
  // GpsTracking   GpsTracking @relation(fields: [gpsTrackingId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // GpsTracking   GpsTracking?

  // GpsTracking GpsTracking?

  // gpsTrackingId String?  @unique @db.ObjectId // Foreign key

  doctorAppointment AppointmentDoctorAndClient[] @relation("DoctorAppointmentRelation")
  clientAppointment AppointmentDoctorAndClient[] @relation("ClientDoctorAppointmentRelation")

  // appointment         AppointmentDoctorAndClient[]
  // appointment         AppointmentDoctorAndClient[]
}

enum RoleType {
  super_admin
  admin
  doctor
  client
}

model Otp {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  email     String
  otp       String
  expiresAt DateTime @default(now()) @map("expiresAt")

  @@index([expiresAt], map: "expires_at_idx")
}

// model Provider {
//   id          String            @id @default(auto()) @map("_id") @db.ObjectId
//   name        String            @unique
//   email       String            @unique
//   phone       String            @unique
//   address     String?
//   city        String?
//   description String?
//   zipCode     String?
//   state       String?
//   users       User[]
//   programs    ProviderProgram[]
// }

model Service {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  name        String    @unique
  type        String    @default("")
  description String?
  setupFee    Int       @default(0)
  monthlyFee  Int       @default(0)
  parentId    String?   @db.ObjectId
  level       Int       @default(0)
  parent      Service?  @relation("ParentToChild", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children    Service[] @relation("ParentToChild")

  subscriptions ServiceOnSubscription[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ServiceOnSubscription {
  id             String @id @default(auto()) @map("_id") @db.ObjectId
  subscriptionId String @db.ObjectId
  serviceId      String @db.ObjectId

  subscription Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
  service      Service      @relation(fields: [serviceId], references: [id], onDelete: Cascade)
}

// -------------------------- Subscription --------------------------------//
// model Subscription {
//   id String @id @default(auto()) @map("_id") @db.ObjectId

//   clientId String @db.ObjectId
//   client   User   @relation(fields: [clientId], references: [id])

//   payeeType PayeeType @default(individual)

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

// enum PayeeType {
//   individual
//   business
// }

model Subscription {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  clientId String @db.ObjectId
  client   User   @relation(fields: [clientId], references: [id])

  payeeType PayeeType @default(Individual)

  services ServiceOnSubscription[]

  setupFee        Float    @default(0)
  subscriptionFee Float    @default(0)
  expiryAt        DateTime @default(now())

  summary String @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum PayeeType {
  Individual
  Bussiness
}

// model DeviceFeed {
//   id String @id @default(auto()) @map("_id") @db.ObjectId

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

// -------------------------- Devices --------------------------------//

// -------------------------- Meetings --------------------------------//
model ScheduledMeeting {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  companyId String? @db.ObjectId // Ensure this matches the native type of Provider.id
  // company   Company? @relation(fields: [companyId], references: [id])

  doctorId String @db.ObjectId
  doctor   User   @relation("DoctorScheduledMeetingRelation", fields: [doctorId], references: [id])

  clientId String @db.ObjectId
  client   User   @relation("ClientScheduledMeetingRelation", fields: [clientId], references: [id])

  // communicationType MeetingCommunicationTypes @default(VIDEO)
  // meetingType       MeetingTypes              @default(SINGLE)

  date String?
  time String?

  // interpreterRequired MeetingInterpreterRequiredTypes @default(NO)
  // preferredLanguage   MeetingPreferredLanguages       @default(ENGLISH)
  summary String?

  repeatDays  RepeatDay[]
  repeatDates RepeatDate[]
  // meetingRooms MeetingRoom[]

  // status ScheduledMeetingStatus @default(SCHEDULED)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // User      User?    @relation(fields: [userId], references: [id])
  // userId    String?  @db.ObjectId
  // User      User?    @relation(fields: [userId], references: [id])
  // userId    String?  @db.ObjectId
}

// enum ScheduledMeetingStatus {
//   SCHEDULED
//   ACTIVE
//   COMPLETED
// }

enum PlanTypeEnum {
  MONTHLY
  YEARLY
}

model Plan {
  id        String       @id @default(auto()) @map("_id") @db.ObjectId
  PlanType  PlanTypeEnum
  Summary   String
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}

model RepeatDay {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  meetingId String           @db.ObjectId
  meeting   ScheduledMeeting @relation(fields: [meetingId], references: [id])

  day  DateTime
  time DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model RepeatDate {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  meetingId String           @db.ObjectId
  meeting   ScheduledMeeting @relation(fields: [meetingId], references: [id])

  date DateTime
  time String
}

// enum MeetingPreferredLanguages {
//   ENGLISH
//   SPANISH
//   SOMALI
//   ARABIC
// }

// enum MeetingInterpreterRequiredTypes {
//   YES
//   NO
// }

// enum MeetingCommunicationTypes {
//   AUDIO
//   VIDEO
// }

// enum MeetingTypes {
//   SINGLE
//   REPEAT
// }

// model MeetingRoom {
//   id String @id @default(auto()) @map("_id") @db.ObjectId

//   duration Int? // Duration in seconds

//   startTime DateTime  @default(now())
//   endTime   DateTime?

//   scheduledMeetingId String           @db.ObjectId
//   scheduledMeeting   ScheduledMeeting @relation(fields: [scheduledMeetingId], references: [id])

//   status MeetingStatus @default(ACTIVE)

//   agenda String?

//   clientFeedback String?
//   doctorFeedback String?

//   // participants MeetingParticipants[]
//   chat        MeetingMessages[]
//   meetingLogs MeetingLogs[]

//   meetingParticipants MeetingParticipants[]
//   currentParticipants MeetingCurrentParticipants[]

//   // meetingTime DateTime
//   // meetingDate      DateTime
//   // meetingTitle     String

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

enum MeetingStatus {
  ACTIVE
  COMPLETED
}

model MeetingMessages {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  senderName String
  message    String

  senderId String? @db.ObjectId
  sender   User?   @relation(fields: [senderId], references: [id])

  // meetingRoomId String      @db.ObjectId
  // meetingRoom   MeetingRoom @relation(fields: [meetingRoomId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MeetingParticipants {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  name String @default("")

  uid String @default("")

  userId String? @db.ObjectId
  user   User?   @relation(fields: [userId], references: [id])

  // meetingRoomId String      @db.ObjectId
  // meetingRoom   MeetingRoom @relation(fields: [meetingRoomId], references: [id])

  createdAt DateTime @default(now())
  // meetingStartTime DateTime
  // meetingEndTime   DateTime
  // meetingIssues    String
  // meetingDate      DateTime

  // @@unique([meetingRoomId, userId]) // Composite unique constraint
}

model MeetingCurrentParticipants {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  name String @default("")

  uid String @default("")

  userId String? @db.ObjectId
  user   User?   @relation(fields: [userId], references: [id])

  meetingRoomId String @db.ObjectId
  // meetingRoom   MeetingRoom @relation(fields: [meetingRoomId], references: [id])

  createdAt DateTime @default(now())
  // meetingStartTime DateTime
  // meetingEndTime   DateTime
  // meetingIssues    String
  // meetingDate      DateTime

  @@unique([meetingRoomId, userId]) // Composite unique constraint
}

model MeetingLogs {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  meetingRoomId String @db.ObjectId
  // meetingRoom   MeetingRoom @relation(fields: [meetingRoomId], references: [id])

  name String @default("")

  uid String @default("")

  userId String? @db.ObjectId
  user   User?   @relation(fields: [userId], references: [id])

  logType MeetingLogType @default(START)

  logMessage String? // Optional message for additional information
  createdAt  DateTime @default(now()) // When the log entry was created

  @@index([meetingRoomId]) // Index for faster queries on meeting logs by meeting
  @@index([userId]) // Index for faster queries on meeting logs by user
}

enum MeetingLogType {
  START
  JOIN
  LEAVE
  DISCONNECTED
  ISSUE
  MESSAGE
  END
}

// -------------------------- Chat --------------------------------//

model Chat {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  name    String? // For group chats
  isGroup Boolean @default(false)

  participants ChatUser[]
  messages     Message[]  @relation("messageToChatRelation")

  lastMessageId String?  @db.ObjectId
  lastMessage   Message? @relation("lastMessageToChatRelation", fields: [lastMessageId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // @@index([lastMessageId])
}

model ChatUser {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  userId String @db.ObjectId
  chatId String @db.ObjectId

  hasSeen Boolean @default(false)

  user User @relation(fields: [userId], references: [id])
  chat Chat @relation(fields: [chatId], references: [id])

  joinedAt DateTime @default(now())

  @@unique([userId, chatId]) // Ensures a user is not duplicated in a chat
}

model Message {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  chatId   String @db.ObjectId
  senderId String @db.ObjectId

  content     String
  messageType String @default("text")

  seenBy String[] @db.ObjectId

  chat   Chat @relation("messageToChatRelation", fields: [chatId], references: [id])
  sender User @relation(fields: [senderId], references: [id])

  lastMessageChat Chat[] @relation("lastMessageToChatRelation")

  createdAt DateTime @default(now())
}

// -------------------------- Notification --------------------------------//
model Notification {
  id      String           @id @default(auto()) @map("_id") @db.ObjectId
  type    NotificationType
  title   String
  message String
  data    Json?            @default("{}")

  createdAt DateTime @default(now())

  recipients UserNotification[]
}

model UserNotification {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  userId         String    @db.ObjectId
  notificationId String    @db.ObjectId
  isRead         Boolean   @default(false)
  isArchived     Boolean   @default(false)
  readAt         DateTime?

  user         User         @relation(fields: [userId], references: [id])
  notification Notification @relation(fields: [notificationId], references: [id])

  @@unique([userId, notificationId]) // Ensure each user can only receive a specific notification once
}

enum NotificationType {
  MESSAGE // Notification about a new message
  REGISTRATION // Notification about a new user registration
  SUBSCRIPTION // Notification about subscription updates
  START_MEETING // Notification about a scheduled meeting
  MEETING // Notification about a scheduled meeting
  END_MEETING // Notification about a scheduled meeting
  ALERT // Generic alert or notification
  CUSTOM // Custom notification type
}

// -------------------------- GPS Tracking --------------------------------//
model AppointmentDoctorAndClient {
  id              String            @id @default(auto()) @map("_id") @db.ObjectId
  doctorId        String            @db.ObjectId
  clientId        String            @db.ObjectId
  appointmentDate DateTime
  status          AppointmentStatus @default(PENDING)
  reason          String
  // prescription    Prescription?
  notes           String?
  // createdAt       DateTime          @default(now())

  doctor User @relation("DoctorAppointmentRelation", fields: [doctorId], references: [id])
  client User @relation("ClientDoctorAppointmentRelation", fields: [clientId], references: [id])
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELLED
}

// question section for intake from

model Question {
  id           String          @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  type         InputTypeOption @default(text)
  options      Option[]
  formQuestions FormQuestion[]
  SubQuestion  SubQuestion[]

  coloum coloum[]
  Answer Answer[]
}

model coloum {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  Question    Question? @relation(fields: [questionId], references: [id])
  questionId  String?   @db.ObjectId
  arrangement Int?

  questionTestId String? @db.ObjectId
}

model Option {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  show          Boolean
  type          InputTypeOption @default(text)
  question      Question?       @relation(fields: [questionId], references: [id])
  questionId    String?         @db.ObjectId
  SubQuestion   SubQuestion?    @relation(fields: [subQuestionId], references: [id])
  subQuestionId String?         @db.ObjectId

  questionTestId String? @db.ObjectId

  multipleValues MultipleValues[]
}

model SubQuestion {
  id         String          @id @default(auto()) @map("_id") @db.ObjectId
  question   Question?       @relation(fields: [questionId], references: [id])
  questionId String?         @db.ObjectId
  title      String
  type       InputTypeOption @default(text)

  options     Option[]
  // questionTestId String?  @db.ObjectId
  arrangement Int?

  Answer Answer[]
}

enum InputTypeOption {
  file
  text
  radio
  checkbox
  table
  html
  textarea
  date
  Signature
  number
  email
}

model Form {
  id               String             @id @default(auto()) @map("_id") @db.ObjectId
  title            String
  createdAt        DateTime           @default(now())
  formQuestions        FormQuestion[] // linked questions
  AnswerSubmission AnswerSubmission[]
}

model FormQuestion {
  id          String           @id @default(auto()) @map("_id") @db.ObjectId
  form        Form             @relation(fields: [formId], references: [id])
  formId      String           @db.ObjectId
  question    Question?       @relation(fields: [questionId], references: [id])
  questionId  String?          @db.ObjectId
  title       String?
  type        InputTypeOption?
  createdAt   DateTime         @default(now())
  options     CustomOption[]
  arrangement Int?

  questionTestId String? @db.ObjectId
}

model CustomOption {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  value          String
  formquestion   FormQuestion? @relation(fields: [formquestionId], references: [id])
  formquestionId String?       @db.ObjectId
}

model AnswerSubmission {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  form      Form     @relation(fields: [formId], references: [id])
  formId    String   @db.ObjectId
  createdAt DateTime @default(now())

  answers Answer[]
}

model Answer {
  id           String           @id @default(auto()) @map("_id") @db.ObjectId
  submission   AnswerSubmission @relation(fields: [submissionId], references: [id])
  submissionId String           @db.ObjectId

  question   Question? @relation(fields: [questionId], references: [id])
  questionId String?   @db.ObjectId

  subQuestion   SubQuestion? @relation(fields: [subQuestionId], references: [id])
  subQuestionId String?      @db.ObjectId

  value          String? // text, textarea, html, etc.
  multipleValues MultipleValues[]
  type           String
  signatureLink  String?
}

model MultipleValues {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  Option     Option? @relation(fields: [OptionId], references: [id])
  OptionId   String? @db.ObjectId
  otherValue String?
  Answer     Answer? @relation(fields: [answerId], references: [id])
  answerId   String? @db.ObjectId

  @@map("multipleValues")
}
